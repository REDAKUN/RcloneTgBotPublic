from datetime import timedelta
import math
import time

FINISHED_PROGRESS_STR = "■"
UN_FINISHED_PROGRESS_STR = "□"

async def progress_for_telethon(
    current, 
    total, 
    message, 
    file_name, 
    start, 
    time_out
):
        
        now = time.time()
        diff = now - start
        
        if round(diff % time_out) == 0 or current == total:
            percentage = current * 100 / total
            speed = current / diff
            elapsed_time = round(diff) * 1000
            time_to_completion = round((total - current) / speed) * 1000
            estimated_total_time = elapsed_time + time_to_completion

            elapsed_time = human_readable_timedelta(seconds=elapsed_time/1000)

            estimated_total_time = human_readable_timedelta(seconds=estimated_total_time/1000)


            progress = "[{0}{1}] \nP: {2}%\n".format(
                ''.join([FINISHED_PROGRESS_STR for i in range(math.floor(percentage / 10))]),
                ''.join([UN_FINISHED_PROGRESS_STR for i in range(10 - math.floor(percentage / 10))]),
                round(percentage, 2))
            
            tmp = progress + "{0} of {1}\nSpeed: {2}/s\nETA: {3}\nUsing engine: Telethon".format(
                human_readable_bytes(current),
                human_readable_bytes(total),
                human_readable_bytes(speed),
                # elapsed_time if elapsed_time != '' else "0 s",
                estimated_total_time if estimated_total_time != '' else "0 s"
            )

            try:
                if not message.photo:
                    await message.edit(
                        text="**Uploading:** `{}`\n{}".format(
                            file_name,
                            tmp
                        )
                    )
                else:
                    await message.edit(
                        caption="**Uploading:** `{}`\n{}".format(
                            file_name,
                            tmp
                        )
                    )
            except Exception as e:
                pass

def human_readable_bytes(value, digits= 2, delim= "", postfix=""):
    """Return a human-readable file size.
    """
    if value is None:
        return None
    chosen_unit = "B"
    for unit in ("KiB", "MiB", "GiB", "TiB"):
        if value > 1000:
            value /= 1024
            chosen_unit = unit
        else:
            break
    return f"{value:.{digits}f}" + delim + chosen_unit + postfix

def human_readable_timedelta(seconds, precision = 0):
    """Return a human-readable time delta as a string.
    """
    pieces = []
    value = timedelta(seconds=seconds)
    

    if value.days:
        pieces.append(f"{value.days}d")

    seconds = value.seconds

    if seconds >= 3600:
        hours = int(seconds / 3600)
        pieces.append(f"{hours}h")
        seconds -= hours * 3600

    if seconds >= 60:
        minutes = int(seconds / 60)
        pieces.append(f"{minutes}m")
        seconds -= minutes * 60

    if seconds > 0 or not pieces:
        pieces.append(f"{seconds}s")

    if not precision:
        return "".join(pieces)

    return "".join(pieces[:precision])